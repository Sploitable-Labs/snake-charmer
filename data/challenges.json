[
    {
        "id": 1,
        "name": "Sum of Two Numbers",
        "category": "Basic Math",
        "score": 10,
        "instructions": "Write a function called 'foo' that takes two numbers as arguments and returns their sum.",
        "hints": [],
        "test_cases": [
            {"input": [1, 2], "expected_output": 3},
            {"input": [5, 7], "expected_output": 12}
        ]
    },
    {
        "id": 2,
        "name": "Check Even or Odd",
        "category": "Conditionals",
        "score": 15,
        "instructions": "Write a function called 'foo' that takes a single integer as an argument and returns 'Even' if the number is even, and 'Odd' if the number is odd.",
        "hints": [
            {"text": "Use the modulus operator (%) to check for evenness.", "penalty": 3},
            {"text": "Return 'Even' if the result is zero.", "penalty": 2},
            {"text": "Otherwise, return 'Odd'.", "penalty": 1}
        ],
        "test_cases": [
            {"input": [2], "expected_output": "Even"},
            {"input": [7], "expected_output": "Odd"}
        ]
    },
    {
        "id": 3,
        "name": "Sum of List",
        "category": "Lists",
        "score": 20,
        "instructions": "Write a function called 'foo' that takes a list of numbers and returns the sum of all the numbers in the list.",
        "hints": [
            {"text": "Consider using Python's built-in sum() function.", "penalty": 5},
            {"text": "Alternatively, use a loop to accumulate the sum.", "penalty": 3},
            {"text": "Ensure your function returns the accumulated total.", "penalty": 2}
        ],
        "test_cases": [
            {"input": [[1, 2, 3]], "expected_output": 6},
            {"input": [[5, 5, 5]], "expected_output": 15}
        ]
    },
    {
        "id": 4,
        "name": "Find Maximum",
        "category": "Lists",
        "score": 20,
        "instructions": "Write a function called 'foo' that takes a list of numbers and returns the maximum value in the list.",
        "hints": [
            {"text": "You can use Python's max() function to find the largest number.", "penalty": 5},
            {"text": "Try using a loop to compare values if you want to avoid max().", "penalty": 3},
            {"text": "Make sure your function returns the largest value.", "penalty": 2}
        ],
        "test_cases": [
            {"input": [[1, 2, 3]], "expected_output": 3},
            {"input": [[10, 15, 7]], "expected_output": 15}
        ]
    },
    {
        "id": 5,
        "name": "Factorial Calculation",
        "category": "Loops",
        "score": 25,
        "instructions": "Write a function called 'foo' that takes a single integer n and returns the factorial of n (n!).",
        "hints": [
            {"text": "Use a loop or recursion to calculate the factorial.", "penalty": 7},
            {"text": "Multiply n by each number less than n down to 1.", "penalty": 5},
            {"text": "For n = 0, return 1 as a factorial.", "penalty": 3}
        ],
        "test_cases": [
            {"input": [5], "expected_output": 120},
            {"input": [3], "expected_output": 6}
        ]
    },
    {
        "id": 6,
        "name": "String Reversal",
        "category": "Strings",
        "score": 15,
        "instructions": "Write a function called 'foo' that takes a string and returns the string reversed.",
        "hints": [
            {"text": "Use slicing with [::-1] to reverse a string in Python.", "penalty": 3},
            {"text": "You could also use a loop to build the reversed string.", "penalty": 2},
            {"text": "Ensure your function returns the reversed string.", "penalty": 1}
        ],
        "test_cases": [
            {"input": ["hello"], "expected_output": "olleh"},
            {"input": ["world"], "expected_output": "dlrow"}
        ]
    },
    {
        "id": 7,
        "name": "Count Vowels",
        "category": "Strings",
        "score": 20,
        "instructions": "Write a function called 'foo' that takes a string and returns the number of vowels in the string.",
        "hints": [
            {"text": "Use a loop to iterate through the string.", "penalty": 5},
            {"text": "Check if each character is a vowel (a, e, i, o, u).", "penalty": 3},
            {"text": "Use a count variable to accumulate the number of vowels.", "penalty": 2}
        ],
        "test_cases": [
            {"input": ["hello"], "expected_output": 2},
            {"input": ["world"], "expected_output": 1}
        ]
    },
    {
        "id": 8,
        "name": "FizzBuzz",
        "category": "Conditionals and Loops",
        "score": 30,
        "instructions": "Write a function called 'foo' that takes an integer n. For each number from 1 to n, print 'Fizz' if the number is divisible by 3, 'Buzz' if it's divisible by 5, and 'FizzBuzz' if it's divisible by both 3 and 5. Otherwise, print the number itself. Return a list of the results.",
        "hints": [
            {"text": "Use a loop to iterate from 1 to n.", "penalty": 5},
            {"text": "Check divisibility using % operator for 3 and 5.", "penalty": 5},
            {"text": "Use conditional statements to handle 'Fizz', 'Buzz', and 'FizzBuzz'.", "penalty": 5}
        ],
        "test_cases": [
            {"input": [5], "expected_output": ["1", "2", "Fizz", "4", "Buzz"]},
            {"input": [15], "expected_output": ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]}
        ]
    },
    {
        "id": 9,
        "name": "Generate Multiples of 3",
        "category": "Loops",
        "score": 15,
        "instructions": "Write a function called 'foo' that takes an integer n and returns a list of the first n multiples of 3.",
        "hints": [
            {"text": "Use a loop to generate the multiples of 3.", "penalty": 3},
            {"text": "Multiply the loop index by 3 to get each multiple.", "penalty": 2},
            {"text": "Return the list of multiples.", "penalty": 1}
        ],
        "test_cases": [
            {"input": [3], "expected_output": [3, 6, 9]},
            {"input": [5], "expected_output": [3, 6, 9, 12, 15]}
        ]
    },
    {
        "id": 10,
        "name": "Prime Checker",
        "category": "Conditionals and Loops",
        "score": 25,
        "instructions": "Write a function called 'foo' that takes a number and returns True if the number is prime, otherwise returns False.",
        "hints": [
            {"text": "A prime number has no divisors other than 1 and itself.", "penalty": 7},
            {"text": "Check divisibility starting from 2 up to the square root of n.", "penalty": 5},
            {"text": "Return True if no divisors are found, else return False.", "penalty": 3}
        ],
        "test_cases": [
            {"input": [2], "expected_output": true},
            {"input": [4], "expected_output": false},
            {"input": [13], "expected_output": true}
        ]
    }
]